"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class imu_data(object):
    __slots__ = ["Ax", "Ay", "Az", "Gx", "Gy", "Gz"]

    def __init__(self):
        self.Ax = 0.0
        self.Ay = 0.0
        self.Az = 0.0
        self.Gx = 0.0
        self.Gy = 0.0
        self.Gz = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(imu_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddd", self.Ax, self.Ay, self.Az, self.Gx, self.Gy, self.Gz))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imu_data()
        self.Ax, self.Ay, self.Az, self.Gx, self.Gy, self.Gz = struct.unpack(">dddddd", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imu_data in parents: return 0
        tmphash = (0x2310a4ce36ab377a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imu_data._packed_fingerprint is None:
            imu_data._packed_fingerprint = struct.pack(">Q", imu_data._get_hash_recursive([]))
        return imu_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

